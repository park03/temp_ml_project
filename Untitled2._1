{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled2._1","provenance":[{"file_id":"1_utcq3Wtd-fNC0jjKxDVbr5PuzoW-_A6","timestamp":1595294051743}],"collapsed_sections":[],"authorship_tag":"ABX9TyMvbuyGb9kN6ZjWHyJcq+Iy"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"ealZKfeukUzC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595318902093,"user_tz":-540,"elapsed":712,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"338207c3-2cea-457a-bc95-62ba55e5ddfb"},"source":["# Google Drive와 마운트\n","from google.colab import drive\n","ROOT = '/content/drive'\n","drive.mount(ROOT)"],"execution_count":54,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nULaaWHGkXSa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595318902387,"user_tz":-540,"elapsed":550,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"98f93292-fbd7-4734-a758-d90445eef6c6"},"source":["# Project Folder 연결\n","from os.path import join  \n","\n","MY_GOOGLE_DRIVE_PATH = 'My Drive/Colab Notebooks/hkit_301/data'\n","PROJECT_PATH = join(ROOT, MY_GOOGLE_DRIVE_PATH)\n","print(PROJECT_PATH)"],"execution_count":55,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/hkit_301/data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RAepE4KfkYdH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595318904920,"user_tz":-540,"elapsed":794,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"495a82cc-4ec6-46f0-d9c0-63a54513dd64"},"source":["%cd \"{PROJECT_PATH}\""],"execution_count":56,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/hkit_301/data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DzE-zOB2kmtv","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595318904921,"user_tz":-540,"elapsed":396,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":[""],"execution_count":56,"outputs":[]},{"cell_type":"code","metadata":{"id":"E5HZwPGg4VEt","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1595318911902,"user_tz":-540,"elapsed":7128,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"a25586e9-d863-4123-cf94-6e503f755a17"},"source":["!pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip\n","#코랩에서는 매번 실행해줘야함."],"execution_count":57,"outputs":[{"output_type":"stream","text":["Collecting https://github.com/pandas-profiling/pandas-profiling/archive/master.zip\n","  Using cached https://github.com/pandas-profiling/pandas-profiling/archive/master.zip\n","Requirement already satisfied (use --upgrade to upgrade): pandas-profiling==2.9.0rc1 from https://github.com/pandas-profiling/pandas-profiling/archive/master.zip in /usr/local/lib/python3.6/dist-packages\n","Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (0.16.0)\n","Requirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (1.4.1)\n","Requirement already satisfied: pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (1.0.5)\n","Requirement already satisfied: matplotlib>=3.2.0 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (3.2.2)\n","Requirement already satisfied: confuse>=1.0.0 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (1.3.0)\n","Requirement already satisfied: jinja2>=2.11.1 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (2.11.2)\n","Requirement already satisfied: visions[type_image_path]==0.4.4 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (0.4.4)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (1.18.5)\n","Requirement already satisfied: attrs>=19.3.0 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (19.3.0)\n","Requirement already satisfied: htmlmin>=0.1.12 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (0.1.12)\n","Requirement already satisfied: missingno>=0.4.2 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (0.4.2)\n","Requirement already satisfied: phik>=0.9.10 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (0.10.0)\n","Requirement already satisfied: tangled-up-in-unicode>=0.0.6 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (0.0.6)\n","Requirement already satisfied: requests>=2.23.0 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (2.23.0)\n","Requirement already satisfied: tqdm>=4.43.0 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (4.48.0)\n","Requirement already satisfied: ipywidgets>=7.5.1 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (7.5.1)\n","Requirement already satisfied: seaborn>=0.10.1 in /usr/local/lib/python3.6/dist-packages (from pandas-profiling==2.9.0rc1) (0.10.1)\n","Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3->pandas-profiling==2.9.0rc1) (2.8.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3->pandas-profiling==2.9.0rc1) (2018.9)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=3.2.0->pandas-profiling==2.9.0rc1) (1.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=3.2.0->pandas-profiling==2.9.0rc1) (0.10.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=3.2.0->pandas-profiling==2.9.0rc1) (2.4.7)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from confuse>=1.0.0->pandas-profiling==2.9.0rc1) (3.13)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.6/dist-packages (from jinja2>=2.11.1->pandas-profiling==2.9.0rc1) (1.1.1)\n","Requirement already satisfied: networkx>=2.4 in /usr/local/lib/python3.6/dist-packages (from visions[type_image_path]==0.4.4->pandas-profiling==2.9.0rc1) (2.4)\n","Requirement already satisfied: Pillow; extra == \"type_image_path\" in /usr/local/lib/python3.6/dist-packages (from visions[type_image_path]==0.4.4->pandas-profiling==2.9.0rc1) (7.0.0)\n","Requirement already satisfied: imagehash; extra == \"type_image_path\" in /usr/local/lib/python3.6/dist-packages (from visions[type_image_path]==0.4.4->pandas-profiling==2.9.0rc1) (4.1.0)\n","Requirement already satisfied: numba>=0.38.1 in /usr/local/lib/python3.6/dist-packages (from phik>=0.9.10->pandas-profiling==2.9.0rc1) (0.48.0)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.23.0->pandas-profiling==2.9.0rc1) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.23.0->pandas-profiling==2.9.0rc1) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.23.0->pandas-profiling==2.9.0rc1) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.23.0->pandas-profiling==2.9.0rc1) (2020.6.20)\n","Requirement already satisfied: widgetsnbextension~=3.5.0 in /usr/local/lib/python3.6/dist-packages (from ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (3.5.1)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.6/dist-packages (from ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (4.10.1)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.6/dist-packages (from ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (4.3.3)\n","Requirement already satisfied: nbformat>=4.2.0 in /usr/local/lib/python3.6/dist-packages (from ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (5.0.7)\n","Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /usr/local/lib/python3.6/dist-packages (from ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (5.5.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.6.1->pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3->pandas-profiling==2.9.0rc1) (1.12.0)\n","Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.4->visions[type_image_path]==0.4.4->pandas-profiling==2.9.0rc1) (4.4.2)\n","Requirement already satisfied: PyWavelets in /usr/local/lib/python3.6/dist-packages (from imagehash; extra == \"type_image_path\"->visions[type_image_path]==0.4.4->pandas-profiling==2.9.0rc1) (1.1.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from numba>=0.38.1->phik>=0.9.10->pandas-profiling==2.9.0rc1) (49.1.0)\n","Requirement already satisfied: llvmlite<0.32.0,>=0.31.0dev0 in /usr/local/lib/python3.6/dist-packages (from numba>=0.38.1->phik>=0.9.10->pandas-profiling==2.9.0rc1) (0.31.0)\n","Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.6/dist-packages (from widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (5.2.2)\n","Requirement already satisfied: tornado>=4.0 in /usr/local/lib/python3.6/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (4.5.3)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.6/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (5.3.5)\n","Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.6/dist-packages (from traitlets>=4.3.1->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.2.0)\n","Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /usr/local/lib/python3.6/dist-packages (from nbformat>=4.2.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (2.6.0)\n","Requirement already satisfied: jupyter-core in /usr/local/lib/python3.6/dist-packages (from nbformat>=4.2.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (4.6.3)\n","Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.6/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (1.0.18)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.6/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (2.1.3)\n","Requirement already satisfied: pexpect; sys_platform != \"win32\" in /usr/local/lib/python3.6/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (4.8.0)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.6/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.7.5)\n","Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.6/dist-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.8.1)\n","Requirement already satisfied: terminado>=0.3.3; sys_platform != \"win32\" in /usr/local/lib/python3.6/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.8.3)\n","Requirement already satisfied: nbconvert in /usr/local/lib/python3.6/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (5.6.1)\n","Requirement already satisfied: pyzmq>=13 in /usr/local/lib/python3.6/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (19.0.1)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.6/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.2.5)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.6/dist-packages (from pexpect; sys_platform != \"win32\"->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.6.0)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.6/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (1.4.2)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.6/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (3.1.5)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.6/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.6.0)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.6/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.8.4)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.6/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.3)\n","Requirement already satisfied: testpath in /usr/local/lib/python3.6/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.4.4)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.6/dist-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (0.5.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.6/dist-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets>=7.5.1->pandas-profiling==2.9.0rc1) (20.4)\n","Building wheels for collected packages: pandas-profiling\n","  Building wheel for pandas-profiling (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pandas-profiling: filename=pandas_profiling-2.9.0rc1-py2.py3-none-any.whl size=258106 sha256=742ff96b8cc016cd572a0f7a4f6410faf73ce79075c8b4c691c8d9a5ef164c01\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-us39y3z7/wheels/56/c2/dd/8d945b0443c35df7d5f62fa9e9ae105a2d8b286302b92e0109\n","Successfully built pandas-profiling\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UzZgcYE4koCf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595318913750,"user_tz":-540,"elapsed":819,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"f3b942f9-84a5-493e-9053-800c92232efd"},"source":["from xgboost import XGBRegressor\n","import xgboost\n","print(xgboost.__version__)"],"execution_count":58,"outputs":[{"output_type":"stream","text":["0.90\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YzHDW0xra-50","colab_type":"text"},"source":["회구모형 만들고 예측"]},{"cell_type":"code","metadata":{"id":"JRzURakekp93","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":179},"executionInfo":{"status":"ok","timestamp":1595318913999,"user_tz":-540,"elapsed":835,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"12aff6e2-94b4-4eca-d295-b2df405e11a1"},"source":["# 데이터셋 분리\n","from sklearn.model_selection import train_test_split\n","\n","# 데이터 수집\n","from sklearn.datasets import load_boston\n","\n","# 평가 메트릭\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","# 데이터 수집\n","boston = load_boston()\n","x, y = boston.data, boston.target\n","\n","# 데이터 분리\n","X_train, X_test, y_train, y_test=train_test_split(x, y, test_size=0.15, random_state = 1)\n","\n","xgb_reg = XGBRegressor(verbosity=0) \n","print(xgb_reg)\n","\n","xgb_reg.fit(X_train, y_train)\n","score = xgb_reg.score(X_train, y_train)  \n","print(\"Training score: \", score)\n","\n","y_pred = xgb_reg.predict(X_test)\n","mse = mean_squared_error(y_test, y_pred)\n","print(\"MSE: %.2f\" % mse)"],"execution_count":59,"outputs":[{"output_type":"stream","text":["XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","             colsample_bynode=1, colsample_bytree=1, gamma=0,\n","             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n","             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n","             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n","             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n","             silent=None, subsample=1, verbosity=0)\n","Training score:  0.9749120480780799\n","MSE: 7.22\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hbSaxQdMmszQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595318915292,"user_tz":-540,"elapsed":643,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"216bfea9-15a7-4652-c45e-13e348640746"},"source":["import lightgbm\n","from lightgbm import LGBMRegressor\n","print(lightgbm.__version__)"],"execution_count":60,"outputs":[{"output_type":"stream","text":["2.2.3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wfP2nLstbI16","colab_type":"text"},"source":["LightGBM : 연산 속도가 XGBoost보다 빠르며 균형을 맞추지않고 최적의 값을 찾아나감."]},{"cell_type":"code","metadata":{"id":"Qb8SzbOvm_D4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":179},"executionInfo":{"status":"ok","timestamp":1595319079783,"user_tz":-540,"elapsed":608,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"91a67633-cd41-4508-a252-018836677cd5"},"source":["# 데이터셋 분리\n","from sklearn.model_selection import train_test_split\n","\n","# 데이터 수집\n","from sklearn.datasets import load_boston\n","\n","# 평가 메트릭\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","# 데이터 수집\n","boston = load_boston()\n","x, y = boston.data, boston.target\n","\n","# 데이터 분리\n","X_training, X_testing, y_training, y_testing = train_test_split(x, y, test_size=0.15, random_state = 1)\n","\n","lgb_reg = LGBMRegressor(verbosity=0) \n","print(lgb_reg)\n","\n","lgb_reg.fit(X_training, y_training)\n","score = lgb_reg.score(X_training, y_training)  \n","print(\"Training score: \", score)\n","\n","y_pred = lgb_reg.predict(X_testing)\n","mse = mean_squared_error(y_testing, y_pred)\n","print(\"MSE: %.2f\" % mse)"],"execution_count":63,"outputs":[{"output_type":"stream","text":["LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n","              importance_type='split', learning_rate=0.1, max_depth=-1,\n","              min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n","              n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,\n","              random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n","              subsample=1.0, subsample_for_bin=200000, subsample_freq=0,\n","              verbosity=0)\n","Training score:  0.9799082762820248\n","MSE: 9.44\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"V4WL5e-kbbMJ","colab_type":"text"},"source":["스태킹 알고리즘"]},{"cell_type":"code","metadata":{"id":"4fYERuQBm_M3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"status":"ok","timestamp":1595319080718,"user_tz":-540,"elapsed":1005,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"561d7677-2cff-4ea0-cd9a-5d08c8b293e4"},"source":["import numpy as np\n","\n","#머신러닝 \n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.linear_model import LogisticRegression\n","\n","from sklearn.datasets import load_breast_cancer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","\n","\n","cancer_data = load_breast_cancer()\n","\n","X_data = cancer_data.data\n","y_label = cancer_data.target\n","\n","X_training , X_testing , y_training , y_testing = train_test_split(X_data , y_label , test_size=0.2 , random_state=0)\n","\n","# 개별 ML 모델을 위한 Classifier 생성.\n","knn_clf  = KNeighborsClassifier(n_neighbors=4) # 예측할 때 이웃을 찾을 수 있도록 데이터를 저장하는 것\n","rf_clf = RandomForestClassifier(n_estimators=100, random_state=0)\n","dt_clf = DecisionTreeClassifier()\n","ada_clf = AdaBoostClassifier(n_estimators=100)\n","\n","# 최종 Stacking 모델을 위한 Classifier생성. \n","lr_final = LogisticRegression(C=10)\n","\n","# 개별 모델들을 학습. \n","knn_clf.fit(X_training, y_training)\n","rf_clf.fit(X_training , y_training)\n","dt_clf.fit(X_training , y_training)\n","ada_clf.fit(X_training, y_training)\n","\n","# 학습된 개별 모델들이 각자 반환하는 예측 데이터 셋을 생성하고 개별 모델의 정확도 측정. \n","knn_pred = knn_clf.predict(X_testing)\n","rf_pred = rf_clf.predict(X_testing)\n","dt_pred = dt_clf.predict(X_testing)\n","ada_pred = ada_clf.predict(X_testing)\n","\n","print('KNN 정확도: {0:.4f}'.format(accuracy_score(y_testing, knn_pred)))\n","print('랜덤 포레스트 정확도: {0:.4f}'.format(accuracy_score(y_testing, rf_pred)))\n","print('결정 트리 정확도: {0:.4f}'.format(accuracy_score(y_testing, dt_pred)))\n","print('에이다부스트 정확도: {0:.4f} :'.format(accuracy_score(y_testing, ada_pred)))"],"execution_count":64,"outputs":[{"output_type":"stream","text":["KNN 정확도: 0.9211\n","랜덤 포레스트 정확도: 0.9649\n","결정 트리 정확도: 0.9123\n","에이다부스트 정확도: 0.9561 :\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TrmzhVGUm_Pw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"executionInfo":{"status":"ok","timestamp":1595319439163,"user_tz":-540,"elapsed":634,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"aab57f51-2c92-4189-8a23-11446b534838"},"source":["pred = np.array([knn_pred, rf_pred, dt_pred, ada_pred])\n","print(pred.shape)\n","\n","# transpose를 이용해 행과 열의 위치 교환. 컬럼 레벨로 각 알고리즘의 예측 결과를 피처로 만듦. \n","pred = np.transpose(pred)\n","print(pred.shape)\n","\n","lr_final.fit(pred, y_testing)\n","final = lr_final.predict(pred)\n","\n","print('최종 메타 모델의 예측 정확도: {0:.4f}'.format(accuracy_score(y_testing , final)))"],"execution_count":66,"outputs":[{"output_type":"stream","text":["(4, 114)\n","(114, 4)\n","최종 메타 모델의 예측 정확도: 0.9737\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5QMxbhVbm_SI","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595319439991,"user_tz":-540,"elapsed":544,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["####빅쿼리 연동#######"],"execution_count":67,"outputs":[]},{"cell_type":"code","metadata":{"id":"xZKFyPAAm_Uo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595319440301,"user_tz":-540,"elapsed":677,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"3913fc2c-511c-4c7e-8713-ec0fa0076432"},"source":["from google.colab import auth\n","auth.authenticate_user()\n","print('Authenticated')"],"execution_count":68,"outputs":[{"output_type":"stream","text":["Authenticated\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Sz5x0SN6296G","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595319441331,"user_tz":-540,"elapsed":556,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":[""],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMvXVJTnnSiX","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595319449336,"user_tz":-540,"elapsed":7114,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["from google.cloud import bigquery\n","from tabulate import tabulate\n","import pandas as pd\n","\n","project_id='modern-baton-283503'\n","client = bigquery.Client(project=project_id)\n","\n","train = client.query('''\n","  SELECT \n","      * \n","  FROM `modern-baton-283503.jeju_data_ver1.201901_202003_train` \n","  WHERE RAND() < 1000 / (SELECT COUNT(*) FROM `modern-baton-283503.jeju_data_ver1.201901_202003_train`)\n","  ''').to_dataframe()\n","\n","\n"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"fIpM07OH48A2","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595319449338,"user_tz":-540,"elapsed":6922,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":[""],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"0WtKj0-hpklg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"executionInfo":{"status":"ok","timestamp":1595319449339,"user_tz":-540,"elapsed":6730,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"f7e95cf4-ee9b-4c69-994f-76e6b8df8299"},"source":["  print(train)"],"execution_count":70,"outputs":[{"output_type":"stream","text":["      REG_YYMM CARD_SIDO_NM CARD_CCG_NM  ... CSTMR_CNT      AMT  CNT\n","0       201907           경기         시흥시  ...        13   537436   15\n","1       201903           경기         부천시  ...        11   122200   16\n","2       201905           부산         연제구  ...         6    41300    7\n","3       201902           경기         안성시  ...        21   291600   22\n","4       201912           서울          중구  ...        92   994940  121\n","...        ...          ...         ...  ...       ...      ...  ...\n","1003    201907           충북         음성군  ...         9   254500   17\n","1004    201903           서울         동작구  ...         4    80660    6\n","1005    201907           충북     청주시 흥덕구  ...         5   132400    6\n","1006    201912           충북         증평군  ...       116  3864030  454\n","1007    201910           경기    고양시 일산서구  ...         4    61240    4\n","\n","[1008 rows x 12 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1pF3cTq7nYqP","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595319451385,"user_tz":-540,"elapsed":796,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["import pandas as pd\n","import numpy as np\n","import sklearn\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.preprocessing import LabelEncoder\n","\n","# 03 Chapter에서 추가\n","# 평가 메트릭\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","# 시각화\n","import seaborn as sns\n","color = sns.color_palette()\n","sns.set_style('darkgrid')\n","%matplotlib inline\n","import matplotlib\n","import matplotlib.pyplot as plt  # Matlab-style plotting\n","\n","# 통계\n","from scipy import stats\n","from scipy.stats import norm, skew #for some statistics\n","\n","# 06 Chapter 추가\n","from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n","from sklearn.model_selection import KFold, cross_val_score, train_test_split, GridSearchCV\n","from sklearn.metrics import mean_squared_error"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"id":"ixAPbs2cniP3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1595319456232,"user_tz":-540,"elapsed":4013,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"b046bebe-dfdb-4475-fd90-5e9664e0f93a"},"source":["print('Pandas : %s'%(pd.__version__))\n","print('Numpy : %s'%(np.__version__))\n","print('Scikit-Learn : %s'%(sklearn.__version__))\n","print('seaborn : %s'%(sns.__version__))\n","print('matplotlib : %s'%(matplotlib.__version__))\n","!python --version"],"execution_count":72,"outputs":[{"output_type":"stream","text":["Pandas : 1.0.5\n","Numpy : 1.18.5\n","Scikit-Learn : 0.22.2.post1\n","seaborn : 0.10.1\n","matplotlib : 3.2.2\n","Python 3.6.9\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZghlYpdPoG2H","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595319456234,"user_tz":-540,"elapsed":3765,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["def grap_year(data):\n","    data = str(data)\n","    return int(data[:4])\n","\n","def grap_month(data):\n","    data = str(data)\n","    return int(data[4:])"],"execution_count":73,"outputs":[]},{"cell_type":"code","metadata":{"id":"loV0-h1RoSU3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1595319456235,"user_tz":-540,"elapsed":3486,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"c892e47c-9ee9-443d-a17f-13cafc4b0465"},"source":["data = train.copy()\n","data = data.fillna('')\n","print(data['REG_YYMM'].head())"],"execution_count":74,"outputs":[{"output_type":"stream","text":["0    201907\n","1    201903\n","2    201905\n","3    201902\n","4    201912\n","Name: REG_YYMM, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0wE6YuIfoTfH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1595319456235,"user_tz":-540,"elapsed":1433,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"27002f62-aedb-4c87-cd23-d4c2b289dd9e"},"source":["data['year'] = data['REG_YYMM'].apply(lambda x: grap_year(x))\n","data['month'] = data['REG_YYMM'].apply(lambda x: grap_month(x))\n","data = data.drop(['REG_YYMM'], axis=1)\n","data.head()"],"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CARD_SIDO_NM</th>\n","      <th>CARD_CCG_NM</th>\n","      <th>STD_CLSS_NM</th>\n","      <th>HOM_SIDO_NM</th>\n","      <th>HOM_CCG_NM</th>\n","      <th>AGE</th>\n","      <th>SEX_CTGO_CD</th>\n","      <th>FLC</th>\n","      <th>CSTMR_CNT</th>\n","      <th>AMT</th>\n","      <th>CNT</th>\n","      <th>year</th>\n","      <th>month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>경기</td>\n","      <td>시흥시</td>\n","      <td>차량용 주유소 운영업</td>\n","      <td>경기</td>\n","      <td>고양시 덕양구</td>\n","      <td>20s</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>13</td>\n","      <td>537436</td>\n","      <td>15</td>\n","      <td>2019</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>경기</td>\n","      <td>부천시</td>\n","      <td>피자 햄버거 샌드위치 및 유사 음식점업</td>\n","      <td>광주</td>\n","      <td>남구</td>\n","      <td>20s</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>11</td>\n","      <td>122200</td>\n","      <td>16</td>\n","      <td>2019</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>부산</td>\n","      <td>연제구</td>\n","      <td>서양식 음식점업</td>\n","      <td>대구</td>\n","      <td>북구</td>\n","      <td>20s</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>41300</td>\n","      <td>7</td>\n","      <td>2019</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>경기</td>\n","      <td>안성시</td>\n","      <td>한식 음식점업</td>\n","      <td>서울</td>\n","      <td>마포구</td>\n","      <td>20s</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>21</td>\n","      <td>291600</td>\n","      <td>22</td>\n","      <td>2019</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>서울</td>\n","      <td>중구</td>\n","      <td>비알콜 음료점업</td>\n","      <td>경기</td>\n","      <td>이천시</td>\n","      <td>20s</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>92</td>\n","      <td>994940</td>\n","      <td>121</td>\n","      <td>2019</td>\n","      <td>12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  CARD_SIDO_NM CARD_CCG_NM            STD_CLSS_NM  ...  CNT  year month\n","0           경기         시흥시            차량용 주유소 운영업  ...   15  2019     7\n","1           경기         부천시  피자 햄버거 샌드위치 및 유사 음식점업  ...   16  2019     3\n","2           부산         연제구               서양식 음식점업  ...    7  2019     5\n","3           경기         안성시                한식 음식점업  ...   22  2019     2\n","4           서울          중구               비알콜 음료점업  ...  121  2019    12\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"q_S9MoGX41Tv","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320673529,"user_tz":-540,"elapsed":1067,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["# 데이터 정제\n","df = data.drop(['CARD_CCG_NM', 'HOM_CCG_NM','HOM_SIDO_NM','FLC'], axis=1)\n","columns = ['CARD_SIDO_NM', 'STD_CLSS_NM', 'SEX_CTGO_CD', 'AGE', 'year', 'month']\n","df = df.groupby(columns).sum().reset_index(drop=False)"],"execution_count":114,"outputs":[]},{"cell_type":"code","metadata":{"id":"sInQlXft42c-","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320675565,"user_tz":-540,"elapsed":850,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["\n","# 인코딩\n","dtypes = df.dtypes\n","encoders = {}\n","for column in df.columns:\n","    if str(dtypes[column]) == 'object':\n","        encoder = LabelEncoder()\n","        encoder.fit(df[column])\n","        encoders[column] = encoder\n","        \n","df_num = df.copy()        \n","for column in encoders.keys():\n","    encoder = encoders[column]\n","    df_num[column] = encoder.transform(df[column])"],"execution_count":115,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Sff88Io44NW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595320675566,"user_tz":-540,"elapsed":553,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"1aead3db-a4bf-4392-b407-ccb069e0a3bb"},"source":["from sklearn.model_selection import train_test_split\n","\n","X_data, y_data = df_num.loc[:, df_num.columns != 'AMT'], df.loc[:, df_num.columns == 'AMT']\n","y_target = y_data['AMT']\n","X_data = X_data.drop(['CSTMR_CNT', 'CNT'], axis=1)\n","X_train, X_test, y_train, y_test = train_test_split(X_data, y_target, test_size=0.3, random_state=126, shuffle=True)\n","X_train.shape, y_train.shape, X_test.shape, y_test.shape"],"execution_count":116,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((685, 6), (685,), (294, 6), (294,))"]},"metadata":{"tags":[]},"execution_count":116}]},{"cell_type":"code","metadata":{"id":"gFk1z2qY45qu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":627},"executionInfo":{"status":"ok","timestamp":1595320676779,"user_tz":-540,"elapsed":1406,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"9c899da7-bc40-4c7d-f075-894aa53c378d"},"source":["sns.distplot(y_train , fit=norm);\n","(mu, sigma) = norm.fit(y_train)\n","print( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n","plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n","            loc='best')\n","plt.ylabel('Frequency')\n","plt.title('AMT distribution')\n","\n","fig = plt.figure()\n","res = stats.probplot(y_train, plot=plt)\n","plt.show()"],"execution_count":117,"outputs":[{"output_type":"stream","text":["\n"," mu = 1910368.37 and sigma = 8732330.24\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"cUDzd4xI46-O","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":627},"executionInfo":{"status":"ok","timestamp":1595320678881,"user_tz":-540,"elapsed":1445,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"86928c6d-2f6a-4156-a2c2-e6570e06defd"},"source":["y_train = np.log1p(y_train)\n","\n","sns.distplot(y_train , fit=norm);\n","(mu, sigma) = norm.fit(y_train)\n","print( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n","plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n","            loc='best')\n","plt.ylabel('Frequency')\n","plt.title('AMT distribution')\n","\n","fig = plt.figure()\n","res = stats.probplot(y_train, plot=plt)\n","plt.show()"],"execution_count":118,"outputs":[{"output_type":"stream","text":["\n"," mu = 12.61 and sigma = 1.68\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"6ogrRJGt48uO","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320680531,"user_tz":-540,"elapsed":713,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["def rmsle(y, pred): \n","  log_y = np.log1p(y)\n","  log_pred = np.log1p(pred)\n","  squared_error = (log_y - log_pred)**2\n","  rmsle = np.sqrt(np.mean(squared_error))\n","  return print('Test Data RMSLE: {0:.3f}'.format(rmsle))"],"execution_count":119,"outputs":[]},{"cell_type":"code","metadata":{"id":"wI6sGYSF4-02","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320680532,"user_tz":-540,"elapsed":465,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["# 교차검증 수행\n","def get_best_params_model(model, params):\n","  cv_model = GridSearchCV(model, param_grid=params, scoring=\"neg_mean_squared_error\", cv = 5)\n","  cv_model.fit(X_train, y_train)\n","  print(\"----\", model.__class__.__name__, \"----\")\n","  print(\"GridSearchCV 최적 하이퍼 파라미터 :\", cv_model.best_params_)\n","\n","  rmse = np.sqrt(-1*cv_model.best_score_)\n","  print(\"GridSearchCV 최적 평균 RMSE값 :\", np.round(rmse, 3))\n","\n","  eval_pred = cv_model.predict(X_test)\n","  eval_pred = np.expm1(eval_pred)\n","  rmsle(y_test, eval_pred)\n","  \n","  return cv_model.best_estimator_"],"execution_count":120,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qvx25xzd4_7O","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":431},"executionInfo":{"status":"ok","timestamp":1595320699308,"user_tz":-540,"elapsed":18080,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"ae665d06-9b3e-40ee-e3ad-297d1400b9aa"},"source":["from sklearn.linear_model import LinearRegression\n","\n","# 4개의 모델 선언\n","xgb = XGBRegressor(random_state=0)\n","gbm = GradientBoostingRegressor(random_state=0)\n","lgb = LGBMRegressor(random_state=0)  \n","\n","params = {'n_estimators': [1000, 2000]}\n","\n","models = [xgb, gbm, lgb] # 모형 하나 추가 함\n","best_models = []\n","for model in models:\n","  new_model = get_best_params_model(model=model, params=params)\n","  best_models.append(new_model)"],"execution_count":121,"outputs":[{"output_type":"stream","text":["[08:38:01] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:02] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:02] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:02] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:02] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:03] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:03] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:04] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:04] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:05] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:38:05] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n","---- XGBRegressor ----\n","GridSearchCV 최적 하이퍼 파라미터 : {'n_estimators': 1000}\n","GridSearchCV 최적 평균 RMSE값 : 1.941\n","Test Data RMSLE: 1.893\n","---- GradientBoostingRegressor ----\n","GridSearchCV 최적 하이퍼 파라미터 : {'n_estimators': 1000}\n","GridSearchCV 최적 평균 RMSE값 : 1.968\n","Test Data RMSLE: 1.925\n","---- LGBMRegressor ----\n","GridSearchCV 최적 하이퍼 파라미터 : {'n_estimators': 1000}\n","GridSearchCV 최적 평균 RMSE값 : 1.973\n","Test Data RMSLE: 2.055\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZsU7tntt5BHW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1595320699309,"user_tz":-540,"elapsed":16584,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"1c94355f-fbeb-4d83-fd44-4f06153da652"},"source":["# 모형 불러오기\n","xgb_reg = best_models[0]\n","gbm_reg = best_models[1]\n","lgb_reg = best_models[2]\n","\n","# 예측 데이터 세트\n","xgb_pred = xgb_reg.predict(X_test)\n","xgb_pred = np.expm1(xgb_pred)\n","\n","gbm_pred = gbm_reg.predict(X_test)\n","gbm_pred = np.expm1(gbm_pred)\n","\n","lgb_pred = lgb_reg.predict(X_test)\n","lgb_pred = np.expm1(lgb_pred)\n","\n","pred = np.array([xgb_pred, gbm_pred, lgb_pred])\n","print(pred.shape)\n","\n","# transpose를 이용해 행과 열의 위치 교환\n","pred = np.transpose(pred)\n","print(pred.shape)"],"execution_count":122,"outputs":[{"output_type":"stream","text":["(3, 294)\n","(294, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8yAcKoyX5DRu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595320699309,"user_tz":-540,"elapsed":15996,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"b97b854d-9229-4520-9963-6caa38e6a758"},"source":["final = xgb_pred*0.40 + gbm_pred*0.40 + lgb_pred*0.20\n","rmsle(y_test, final)"],"execution_count":123,"outputs":[{"output_type":"stream","text":["Test Data RMSLE: 1.887\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"niDPCH675Efm","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320699310,"user_tz":-540,"elapsed":14998,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["from itertools import product\n","\n","# 예측 템플릿 만들기\n","CARD_SIDO_NMs = df_num['CARD_SIDO_NM'].unique()\n","STD_CLSS_NMs  = df_num['STD_CLSS_NM'].unique()\n","\n","AGEs          = df_num['AGE'].unique()\n","SEX_CTGO_CDs  = df_num['SEX_CTGO_CD'].unique()\n","\n","years         = [2020]\n","months        = [4, 7]\n","\n","comb_list = [CARD_SIDO_NMs, STD_CLSS_NMs, AGEs, SEX_CTGO_CDs,  years, months]\n","temp = np.array(list(product(*comb_list)))\n","\n","train_features = df_num.drop(['CSTMR_CNT', 'AMT', 'CNT'], axis=1)\n","temp = pd.DataFrame(data=temp, columns=train_features.columns)"],"execution_count":124,"outputs":[]},{"cell_type":"code","metadata":{"id":"l513JSp35F0e","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320705752,"user_tz":-540,"elapsed":3343,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["# 예측 데이터 세트\n","xgb_pred = xgb_reg.predict(temp)\n","xgb_pred = np.expm1(xgb_pred)\n","\n","gbm_pred = gbm_reg.predict(temp)\n","gbm_pred = np.expm1(gbm_pred)\n","\n","lgb_pred = lgb_reg.predict(temp)\n","lgb_pred = np.expm1(lgb_pred)"],"execution_count":125,"outputs":[]},{"cell_type":"code","metadata":{"id":"qMeFRsPC5HLe","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320745513,"user_tz":-540,"elapsed":673,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["final = xgb_pred*0.40 + gbm_pred*0.40 + lgb_pred*0.20\n","\n","temp['AMT'] = np.round(final, 0)\n","temp['REG_YYMM'] = temp['year']*100 + temp['month']\n","temp = temp[['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM', 'AMT']]\n","temp = temp.groupby(['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM']).sum().reset_index(drop=False)"],"execution_count":126,"outputs":[]},{"cell_type":"code","metadata":{"id":"RyIHkMAH5I3-","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320745793,"user_tz":-540,"elapsed":419,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["# 디코딩 \n","temp['CARD_SIDO_NM'] = encoders['CARD_SIDO_NM'].inverse_transform(temp['CARD_SIDO_NM'])\n","temp['STD_CLSS_NM'] = encoders['STD_CLSS_NM'].inverse_transform(temp['STD_CLSS_NM'])"],"execution_count":127,"outputs":[]},{"cell_type":"code","metadata":{"id":"GNC6k5wDFKWR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1595320747249,"user_tz":-540,"elapsed":671,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"02828d78-58f7-4c8a-c5e8-4aae1c0c4440"},"source":["print(temp.head())"],"execution_count":128,"outputs":[{"output_type":"stream","text":["   REG_YYMM CARD_SIDO_NM        STD_CLSS_NM        AMT\n","0    202004           강원         건강보조식품 소매업  5694072.0\n","1    202004           강원            골프장 운영업  5494696.0\n","2    202004           강원        과실 및 채소 소매업  3320436.0\n","3    202004           강원  관광 민예품 및 선물용품 소매업  1130564.0\n","4    202004           강원       그외 기타 종합 소매업  1567849.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"W4NI8dB1FLvl","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320750633,"user_tz":-540,"elapsed":2782,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["submission = client.query('''\n","  SELECT \n","    * \n","  FROM `modern-baton-283503.jeju_data_ver1.submission` \n","  ''').to_dataframe()"],"execution_count":129,"outputs":[]},{"cell_type":"code","metadata":{"id":"xQcxAJwGFNhF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1595320751967,"user_tz":-540,"elapsed":718,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}},"outputId":"8912f6a9-1477-4bd7-e399-3648824a4849"},"source":["\n","submission = submission.drop(['AMT'], axis=1)\n","submission = submission.merge(temp, left_on=['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM'], right_on=['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM'], how='left')\n","submission['AMT'] = submission['AMT'].fillna(0)\n","print(submission.head())"],"execution_count":130,"outputs":[{"output_type":"stream","text":["   id  REG_YYMM CARD_SIDO_NM           STD_CLSS_NM        AMT\n","0   0    202004           강원            건강보조식품 소매업  5694072.0\n","1   1    202004           강원               골프장 운영업  5494696.0\n","2   2    202004           강원           과실 및 채소 소매업  3320436.0\n","3   3    202004           강원     관광 민예품 및 선물용품 소매업  1130564.0\n","4   4    202004           강원  그외 기타 분류안된 오락관련 서비스업        0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AL8w1jmHFOrF","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595320753203,"user_tz":-540,"elapsed":619,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":["submission.to_csv('submission.csv', encoding='utf-8-sig', index=False)"],"execution_count":131,"outputs":[]},{"cell_type":"code","metadata":{"id":"yWed-EpIFP_-","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595317636429,"user_tz":-540,"elapsed":235749,"user":{"displayName":"J Park","photoUrl":"","userId":"17257416231642916380"}}},"source":[""],"execution_count":52,"outputs":[]}]}